# System controller service
command: target/debug/eva-controller-system
bus:
  path: var/bus.ipc
config:
  # accept remote agents
  #api:
    # client OID prefix. may contain ${host} variable
    # if no host variable exist, the host name is automatically added at the end
    #client_oid_prefix: sensor:${system_name}/system/host
    #listen: 0.0.0.0:7555
    #max_clients: 128
    # if a front-end server or TLS terminator is used
    #real_ip_header: X-Real-IP
    # in case if set, a remote host can be verified by an external
    # authenticator (e.g. on a front-end server). if specified, the service
    # MUST be run under a trusted front-end and no direct requests should be
    # allowed. Also accepts host names as "CN = host" (RFC 2253)
    #trusted_system_header: X-Authenticated-System
    # host map (name/key)
    # note: the service has got an own key database
    # the keys are not related with EVA ICS API keys
    #hosts:
      #- name: host1
        #key: "secret"
  report:
    oid_prefix: sensor:${system_name}/system
    # when started on a secondary point
    #oid_prefix: sensor:${system_name}/system/host/SPOINT_NAME
    # system info and uptime
    system:
      enabled: true
    # cpu info
    cpu:
      enabled: true
    # system load average
    load_avg:
      enabled: true
    # memory info
    memory:
      enabled: true
    # disk info
    disks:
      enabled: true
      # enable specific mount points only
      # note: for automatic mountpoint list reporting unavailable is not supported
      #mount_points:
        #- /
        #- /var
    # block device info (Linux only)
    blk:
      enabled: true
      # enable specific devices only
      # note: for automatic device list reporting unavailable is not supported,
      # loop devices in auto-list are omitted
      #devices:
        #- nvme0n1
        #- nvme1n1
        #- sda
        #- sdb
    # network info
    network:
      enabled: true
      # enable specific interfaces only
      # note: for automatic interface list reporting unavailable is not supported
      #interfaces:
        #- eth0
        #- eth1
    # custom tasks with external executables
    # the executable must return either a value or JSON payload
    exe:
      tasks:
        - command: "echo OK"
          name: test
          enabled: true
          interval: 1
          # put the result as-is
          map:
            - name: result
        - command: "sensors -j"
          name: sensors
          enabled: true
          interval: 1
          # parsing JSON values is performed with a lightweight JsonPath syntax:
          # $.some.value - value is in a structure "some", field "value"
          # $.some[1].value[2] - work with array of structures
          # $.[1] - top-level array of values
          # $. - payload top-level (the path can be omitted)
          map:
            - name: fan1
              path: $.bus.fan1.fan1_input
              # an optional value transforming section
              transform:
                - func: multiply # multiply the value by N
                  params: [ 1000 ]
                - func: divide # divide the value by N
                  params: [ 1000 ]
                - func: round # round the value to N digits after comma
                  params: [ 2 ]
                - func: calc_speed # use the value as calc-speed gauge (with N seconds delta)
                  params: [ 1 ]
                - func: invert # invert the value between 0/1
                 #params: []
            - name: fan2
              path: $.bus.fan2.fan2_input
user: eva
